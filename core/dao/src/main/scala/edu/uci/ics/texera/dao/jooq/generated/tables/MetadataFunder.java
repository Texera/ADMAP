/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables;


import edu.uci.ics.texera.dao.jooq.generated.Keys;
import edu.uci.ics.texera.dao.jooq.generated.TexeraDb;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.MetadataFunderRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetadataFunder extends TableImpl<MetadataFunderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>texera_db.metadata_funder</code>
     */
    public static final MetadataFunder METADATA_FUNDER = new MetadataFunder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetadataFunderRecord> getRecordType() {
        return MetadataFunderRecord.class;
    }

    /**
     * The column <code>texera_db.metadata_funder.fid</code>.
     */
    public final TableField<MetadataFunderRecord, Integer> FID = createField(DSL.name("fid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>texera_db.metadata_funder.metadata_id</code>.
     */
    public final TableField<MetadataFunderRecord, Integer> METADATA_ID = createField(DSL.name("metadata_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.metadata_funder.name</code>.
     */
    public final TableField<MetadataFunderRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>texera_db.metadata_funder.award_title</code>.
     */
    public final TableField<MetadataFunderRecord, String> AWARD_TITLE = createField(DSL.name("award_title"), SQLDataType.VARCHAR(256), this, "");

    private MetadataFunder(Name alias, Table<MetadataFunderRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetadataFunder(Name alias, Table<MetadataFunderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>texera_db.metadata_funder</code> table reference
     */
    public MetadataFunder(String alias) {
        this(DSL.name(alias), METADATA_FUNDER);
    }

    /**
     * Create an aliased <code>texera_db.metadata_funder</code> table reference
     */
    public MetadataFunder(Name alias) {
        this(alias, METADATA_FUNDER);
    }

    /**
     * Create a <code>texera_db.metadata_funder</code> table reference
     */
    public MetadataFunder() {
        this(DSL.name("metadata_funder"), null);
    }

    public <O extends Record> MetadataFunder(Table<O> child, ForeignKey<O, MetadataFunderRecord> key) {
        super(child, key, METADATA_FUNDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TexeraDb.TEXERA_DB;
    }

    @Override
    public Identity<MetadataFunderRecord, Integer> getIdentity() {
        return (Identity<MetadataFunderRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MetadataFunderRecord> getPrimaryKey() {
        return Keys.METADATA_FUNDER_PKEY;
    }

    @Override
    public List<ForeignKey<MetadataFunderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.METADATA_FUNDER__METADATA_FUNDER_METADATA_ID_FKEY);
    }

    private transient Dataset _dataset;

    /**
     * Get the implicit join path to the <code>texera_db.dataset</code> table.
     */
    public Dataset dataset() {
        if (_dataset == null)
            _dataset = new Dataset(this, Keys.METADATA_FUNDER__METADATA_FUNDER_METADATA_ID_FKEY);

        return _dataset;
    }

    @Override
    public MetadataFunder as(String alias) {
        return new MetadataFunder(DSL.name(alias), this);
    }

    @Override
    public MetadataFunder as(Name alias) {
        return new MetadataFunder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetadataFunder rename(String name) {
        return new MetadataFunder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetadataFunder rename(Name name) {
        return new MetadataFunder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
