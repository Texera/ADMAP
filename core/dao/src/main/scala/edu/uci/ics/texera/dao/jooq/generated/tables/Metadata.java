/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables;


import edu.uci.ics.texera.dao.jooq.generated.Keys;
import edu.uci.ics.texera.dao.jooq.generated.TexeraDb;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.MetadataRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Metadata extends TableImpl<MetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>texera_db.metadata</code>
     */
    public static final Metadata METADATA = new Metadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetadataRecord> getRecordType() {
        return MetadataRecord.class;
    }

    /**
     * The column <code>texera_db.metadata.mid</code>.
     */
    public final TableField<MetadataRecord, Integer> MID = createField(DSL.name("mid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>texera_db.metadata.owner_uid</code>.
     */
    public final TableField<MetadataRecord, Integer> OWNER_UID = createField(DSL.name("owner_uid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.metadata.name</code>.
     */
    public final TableField<MetadataRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>texera_db.metadata.creation_time</code>.
     */
    public final TableField<MetadataRecord, Timestamp> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Metadata(Name alias, Table<MetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Metadata(Name alias, Table<MetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>texera_db.metadata</code> table reference
     */
    public Metadata(String alias) {
        this(DSL.name(alias), METADATA);
    }

    /**
     * Create an aliased <code>texera_db.metadata</code> table reference
     */
    public Metadata(Name alias) {
        this(alias, METADATA);
    }

    /**
     * Create a <code>texera_db.metadata</code> table reference
     */
    public Metadata() {
        this(DSL.name("metadata"), null);
    }

    public <O extends Record> Metadata(Table<O> child, ForeignKey<O, MetadataRecord> key) {
        super(child, key, METADATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TexeraDb.TEXERA_DB;
    }

    @Override
    public Identity<MetadataRecord, Integer> getIdentity() {
        return (Identity<MetadataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MetadataRecord> getPrimaryKey() {
        return Keys.METADATA_PKEY;
    }

    @Override
    public List<ForeignKey<MetadataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.METADATA__METADATA_OWNER_UID_FKEY);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>texera_db.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.METADATA__METADATA_OWNER_UID_FKEY);

        return _user;
    }

    @Override
    public Metadata as(String alias) {
        return new Metadata(DSL.name(alias), this);
    }

    @Override
    public Metadata as(Name alias) {
        return new Metadata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Metadata rename(String name) {
        return new Metadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Metadata rename(Name name) {
        return new Metadata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
