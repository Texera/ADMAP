/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables;


import edu.uci.ics.texera.dao.jooq.generated.Keys;
import edu.uci.ics.texera.dao.jooq.generated.TexeraDb;
import edu.uci.ics.texera.dao.jooq.generated.enums.ContributorRoleEnum;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.MetadataContributorRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetadataContributor extends TableImpl<MetadataContributorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>texera_db.metadata_contributor</code>
     */
    public static final MetadataContributor METADATA_CONTRIBUTOR = new MetadataContributor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetadataContributorRecord> getRecordType() {
        return MetadataContributorRecord.class;
    }

    /**
     * The column <code>texera_db.metadata_contributor.cid</code>.
     */
    public final TableField<MetadataContributorRecord, Integer> CID = createField(DSL.name("cid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>texera_db.metadata_contributor.metadata_id</code>.
     */
    public final TableField<MetadataContributorRecord, Integer> METADATA_ID = createField(DSL.name("metadata_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera_db.metadata_contributor.name</code>.
     */
    public final TableField<MetadataContributorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>texera_db.metadata_contributor.creator</code>.
     */
    public final TableField<MetadataContributorRecord, Boolean> CREATOR = createField(DSL.name("creator"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>texera_db.metadata_contributor.role</code>.
     */
    public final TableField<MetadataContributorRecord, ContributorRoleEnum> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR.asEnumDataType(edu.uci.ics.texera.dao.jooq.generated.enums.ContributorRoleEnum.class), this, "");

    /**
     * The column <code>texera_db.metadata_contributor.email</code>.
     */
    public final TableField<MetadataContributorRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>texera_db.metadata_contributor.affiliation</code>.
     */
    public final TableField<MetadataContributorRecord, String> AFFILIATION = createField(DSL.name("affiliation"), SQLDataType.VARCHAR(256), this, "");

    private MetadataContributor(Name alias, Table<MetadataContributorRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetadataContributor(Name alias, Table<MetadataContributorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>texera_db.metadata_contributor</code> table
     * reference
     */
    public MetadataContributor(String alias) {
        this(DSL.name(alias), METADATA_CONTRIBUTOR);
    }

    /**
     * Create an aliased <code>texera_db.metadata_contributor</code> table
     * reference
     */
    public MetadataContributor(Name alias) {
        this(alias, METADATA_CONTRIBUTOR);
    }

    /**
     * Create a <code>texera_db.metadata_contributor</code> table reference
     */
    public MetadataContributor() {
        this(DSL.name("metadata_contributor"), null);
    }

    public <O extends Record> MetadataContributor(Table<O> child, ForeignKey<O, MetadataContributorRecord> key) {
        super(child, key, METADATA_CONTRIBUTOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TexeraDb.TEXERA_DB;
    }

    @Override
    public Identity<MetadataContributorRecord, Integer> getIdentity() {
        return (Identity<MetadataContributorRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MetadataContributorRecord> getPrimaryKey() {
        return Keys.METADATA_CONTRIBUTOR_PKEY;
    }

    @Override
    public List<ForeignKey<MetadataContributorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.METADATA_CONTRIBUTOR__METADATA_CONTRIBUTOR_METADATA_ID_FKEY);
    }

    private transient Dataset _dataset;

    /**
     * Get the implicit join path to the <code>texera_db.dataset</code> table.
     */
    public Dataset dataset() {
        if (_dataset == null)
            _dataset = new Dataset(this, Keys.METADATA_CONTRIBUTOR__METADATA_CONTRIBUTOR_METADATA_ID_FKEY);

        return _dataset;
    }

    @Override
    public MetadataContributor as(String alias) {
        return new MetadataContributor(DSL.name(alias), this);
    }

    @Override
    public MetadataContributor as(Name alias) {
        return new MetadataContributor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetadataContributor rename(String name) {
        return new MetadataContributor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetadataContributor rename(Name name) {
        return new MetadataContributor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, Boolean, ContributorRoleEnum, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
