/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables.daos;


import edu.uci.ics.texera.dao.jooq.generated.tables.Metadata;
import edu.uci.ics.texera.dao.jooq.generated.tables.records.MetadataRecord;

import java.sql.Timestamp;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetadataDao extends DAOImpl<MetadataRecord, edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata, Integer> {

    /**
     * Create a new MetadataDao without any configuration
     */
    public MetadataDao() {
        super(Metadata.METADATA, edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata.class);
    }

    /**
     * Create a new MetadataDao with an attached configuration
     */
    public MetadataDao(Configuration configuration) {
        super(Metadata.METADATA, edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata.class, configuration);
    }

    @Override
    public Integer getId(edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata object) {
        return object.getMid();
    }

    /**
     * Fetch records that have <code>mid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata> fetchRangeOfMid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Metadata.METADATA.MID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mid IN (values)</code>
     */
    public List<edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata> fetchByMid(Integer... values) {
        return fetch(Metadata.METADATA.MID, values);
    }

    /**
     * Fetch a unique record that has <code>mid = value</code>
     */
    public edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata fetchOneByMid(Integer value) {
        return fetchOne(Metadata.METADATA.MID, value);
    }

    /**
     * Fetch a unique record that has <code>mid = value</code>
     */
    public Optional<edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata> fetchOptionalByMid(Integer value) {
        return fetchOptional(Metadata.METADATA.MID, value);
    }

    /**
     * Fetch records that have <code>owner_uid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata> fetchRangeOfOwnerUid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Metadata.METADATA.OWNER_UID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>owner_uid IN (values)</code>
     */
    public List<edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata> fetchByOwnerUid(Integer... values) {
        return fetch(Metadata.METADATA.OWNER_UID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Metadata.METADATA.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata> fetchByName(String... values) {
        return fetch(Metadata.METADATA.NAME, values);
    }

    /**
     * Fetch records that have <code>creation_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata> fetchRangeOfCreationTime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Metadata.METADATA.CREATION_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creation_time IN (values)</code>
     */
    public List<edu.uci.ics.texera.dao.jooq.generated.tables.pojos.Metadata> fetchByCreationTime(Timestamp... values) {
        return fetch(Metadata.METADATA.CREATION_TIME, values);
    }
}
